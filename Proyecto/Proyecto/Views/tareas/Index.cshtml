@model IEnumerable<Proyecto.Data.tarea>

@{
    ViewBag.Title = "Index";
}

<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>

<div class="container">
    <h2>Tareas</h2>

    <div class="controls">
        <h3>La siguiente tarea se ejecuta en: <span id="contador">30</span></h3>
        <button id="btnEjecutar" class="btn btn-primary">Ejecutar Tareas</button>
        <button id="btnDetener" class="btn btn-danger">Detener Ejecución</button>
        <button id="btnRandom" class="btn btn-success">Crear Tareas Aleatorias</button>
    </div>

    <p>
        @Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-info" })
    </p>
    <br />
    <p>
        @Html.ActionLink("Send Failed Tasks by Mail", "SendFailedTasks", null, new { @class = "btn btn-info" })
    </p>

    <div class="controls">
        <select id="expression" class="form-select">
            <option value="all">Todas</option>
            <option value="group1">Fallidas</option>
            <option value="group2">Exitosas</option>
            <option value="Pendientes">Pendientes</option>
        </select>
        <button onclick="filterResults()" class="btn btn-outline-primary">Filtrar</button>
    </div>

    <table id="results" class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.nombre)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.prioridad)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.fecha_creada)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.fecha_completada)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.exitosa)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.nombre)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.prioridad)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.fecha_creada)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.fecha_completada)
                    </td>
                    <td>
                        @if (item.exitosa == true)
                        {
                            <span class="badge bg-success">Completado</span>
                        }
                        else if (item.exitosa == false)
                        {
                            <span class="badge bg-danger">Fallido</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">Pendiente</span>
                        }
                    </td>
                    <td class="table-actions">
                        @Html.ActionLink("Edit", "Edit", new { id = item.id }, new { @class = "btn btn-sm btn-warning me-1" })
                        @Html.ActionLink("Details", "Details", new { id = item.id }, new { @class = "btn btn-sm btn-info me-1" })
                        @Html.ActionLink("Delete", "Delete", new { id = item.id }, new { @class = "btn btn-sm btn-danger me-1" })
                        @if (item.exitosa == false)
                        {
                            <button class="btn btn-sm btn-success" onclick="completarTarea(@item.id)">Completar</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    //
    <style>
        /* Modo Oscuro */
        body {
            font-family: 'Arial', sans-serif;
            line-height: 1.6;
            margin: 0;
            background-color: #121212;
            color: #ffb14d;
        }

        .container.body-content {
            max-width: 1200px;
            margin: 20px auto;
            padding: 20px;
            background-color: #1e1e1e;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        h2 {
            color: #ff8c00;
            margin-bottom: 20px;
            border-bottom: 3px solid #ffb14d;
            padding-bottom: 10px;
        }

        h3 {
            color: #e0e0e0;
            margin-top: 20px;
            margin-bottom: 10px;
        }

        .controls {
            margin-bottom: 20px;
            padding: 15px;
            background-color: #333;
            border: 1px solid #444;
            border-radius: 5px;
            display: flex;
            gap: 15px;
            align-items: center;
        }

        .btn {
            display: inline-block;
            padding: 10px 20px;
            font-size: 1rem;
            cursor: pointer;
            text-align: center;
            text-decoration: none;
            color: #fff;
            background-color: #ffb14d;
            border: none;
            border-radius: 5px;
            transition: background-color 0.3s ease;
        }

            .btn:hover {
                background-color: #e67e00;
            }

        .btn-primary {
            background-color: #ff8c00;
            color: #000;
        }

            .btn-primary:hover {
                background-color: #e67e00;
            }

        .btn-success {
            background-color: #4caf50;
            color: #000;
        }

            .btn-success:hover {
                background-color: #388e3c;
            }

        #contador {
            font-weight: bold;
            color: #ff8c00;
        }

        #expression {
            padding: 10px;
            border: 1px solid #888;
            border-radius: 4px;
            font-size: 1rem;
            background-color: #333;
            color: #e0e0e0;
        }

        #results {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            background-color: #1e1e1e;
            border: 1px solid #444;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

            #results thead tr {
                background-color: #0288d1;
                color: #fff;
                text-align: left;
            }

            #results th,
            #results td {
                padding: 12px 15px;
                border-bottom: 1px solid #444;
            }

            #results th {
                font-weight: bold;
            }

            #results tbody {
                background-color: #f0f0f0 !important;
            }

                #results tbody tr:nth-child(even) {
                    background-color: #e0e0e0;
                }

                #results tbody tr:hover {
                    background-color: #3b3b3b;
                }

        .table-actions a {
            margin-right: 8px;
            text-decoration: none;
            font-size: 0.9rem;
            padding: 8px 12px;
            border-radius: 4px;
            transition: opacity 0.3s ease;
            color: #000;
        }

            .table-actions a.edit {
                background-color: #ffc107;
                color: #000;
            }

            .table-actions a.details {
                background-color: #17a2b8;
                color: #000;
            }

            .table-actions a.delete {
                background-color: #dc3545;
                color: #000;
            }

        .table-actions button.completar {
            background-color: #4caf50;
            color: #fff;
            border: none;
            cursor: pointer;
        }

        .table-actions a:hover,
        .table-actions button:hover {
            opacity: 0.8;
        }

        .badge {
            display: inline-block;
            padding: 0.35em 0.65em;
            font-size: 0.8em;
            font-weight: 700;
            line-height: 1;
            color: #fff;
            text-align: center;
            white-space: nowrap;
            vertical-align: baseline;
            border-radius: 0.25rem;
        }

            .badge.completado {
                background-color: #4caf50;
            }

            .badge.fallido {
                background-color: #dc3545;
            }

            .badge.pendiente {
                background-color: #6c757d;
            }

        .btn-info {
            background-color: #ffb14d;
            color: #000;
            border: none;
        }

            .btn-info:hover {
                background-color: #e67e00;
                color: #000;
            }

        .btn-outline-primary {
            background-color: #ffb14d;
            color: #000;
            border-color: #ffb14d;
        }

            .btn-outline-primary:hover {
                background-color: #e67e00;
                color: #000;
            }
    </style>

    <script>
    let contador = 5;
    let intervalo = null;
    let ejecucionActiva = false; 

    function iniciarContador() {
        if (ejecucionActiva) { 
            return;
        }
        ejecucionActiva = true;
        document.getElementById("btnEjecutar").disabled = true; 
        document.getElementById("btnDetener").disabled = false; 

        if (intervalo) {
            clearInterval(intervalo);
        }
        contador = 5;
        document.getElementById("contador").textContent = contador;
        intervalo = setInterval(() => {
            document.getElementById("contador").textContent = contador;
            contador--;

            if (contador < 0) {
                completarTareaRandom();
                contador = 5;
            }
        }, 1000);
    }

    function detenerContador() {
        ejecucionActiva = false;
        clearInterval(intervalo);
        intervalo = null;
        document.getElementById("contador").textContent = "Detenido";
        document.getElementById("btnEjecutar").disabled = false; 
        document.getElementById("btnDetener").disabled = true;  
    }

    document.getElementById("btnEjecutar").addEventListener("click", iniciarContador);

    document.getElementById("btnDetener").addEventListener("click", detenerContador);

    //Crea las tareas aleatorias
    document.getElementById("btnRandom").addEventListener("click", function () {
        fetch('@Url.Action("TareasRandom", "tareas")', { method: 'POST' })
            .then(response => {
                if (response.ok) {
                    return response.text();
                }
                throw new Error("Error al generar tareas");
            })
            .then(() => {
                location.reload(); 
            })
            .catch(error => console.error(error));
    });

    function completarTareaRandom() {
        fetch('/Tareas/CompletarTareas', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => {
            if (response.ok) {
                return response.json();
            } else {
                throw new Error('Hubo un error al completar la tarea');
            }
        })
        .then(data => {
            updateResultsList(data);
        })
        .catch(error => {
            console.error('Error al completar la tarea:', error);
        });
    }

    function convertirFecha(fechaJson) {
        if (!fechaJson) return "N/A";
        let timestamp = parseInt(fechaJson.replace(/\/Date\((\d+)\)\//, "$1"));
        let fecha = new Date(timestamp);
        return fecha.toLocaleDateString("es-ES") + " " + fecha.toLocaleTimeString("es-ES");
    }

    function completarTarea(id) {
        fetch(`/Tareas/TareasFallidas/${id}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => {
            if (response.ok) {
                return response.json();
            } else {
                throw new Error('Hubo un error al completar la tarea');
            }
        })
        .then(data => {
            updateResultsList(data);
        })
        .catch(error => {
            console.error('Error al completar la tarea:', error);
        });
    }

    function updateResultsList(data) {
        let resultsTable = document.getElementById("results").querySelector("tbody");
        resultsTable.innerHTML = "";
        data.forEach(item => {
            let row = document.createElement("tr");
            row.innerHTML = `
                <td>${item.nombre}</td>
                <td>${item.prioridad}</td>
                <td>${convertirFecha(item.fecha_creada)}</td>
                <td>${convertirFecha(item.fecha_completada)}</td>
                <td>${item.exitosa === true ? '<span class="badge bg-success">Completado</span>' : (item.exitosa === false ? '<span class="badge bg-danger">Fallido</span>' : '<span class="badge bg-secondary">Pendiente</span>')}</td>
                <td class="table-actions">
                    <a href="/Tareas/Edit/${item.id}" class="btn btn-sm btn-warning me-1">Editar</a>
                    <a href="/Tareas/Details/${item.id}" class="btn btn-sm btn-info me-1">Detalles</a>
                    <a href="/Tareas/Delete/${item.id}" class="btn btn-sm btn-danger me-1">Borrar</a>
                    ${item.exitosa === false ? `<button class="btn btn-sm btn-success" onclick="completarTarea(${item.id})">Completar</button>` : ''}
                </td>
            `;
            resultsTable.appendChild(row);
        });
    }

    function filterResults() {
        let expression = document.getElementById("expression").value;
        fetch(`/Tareas/Filtros?expression=${encodeURIComponent(expression)}`, {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        })
        .then(response => response.json())
        .then(data => updateResultsList(data))
        .catch(error => console.error("Error:", error));
    }
    </script>
</div>
